" PLUGIN
call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" show information of git on statusline and can do git in nvim with G: 
Plug 'tpope/vim-fugitive'

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'scrooloose/nerdTree'
Plug 'sainnhe/gruvbox-material'
Plug 'arcticicestudio/nord-vim'
Plug 'gruvbox-community/gruvbox'
Plug 'natebosch/vim-lsc', {'branch': 'master'}
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'josa42/coc-go', {'branch': 'master'}
Plug 'crusoexia/vim-monokai'
" detech change code 
Plug 'sheerun/vim-polyglot'
Plug 'airblade/vim-gitgutter', {'branch': 'master'}
" theme dracula hight contract
" show info at statusline 
"
" Plug 'prabirshrestha/vim-lsp'
" Plug 'mattn/vim-lsp-settings'

Plug 'vim-airline/vim-airline'
" Markdown preview file. Once open markdown file in nvim then type
" :MarkdownPreview then browser automatically open it and
" :MarkdownPreviewStop to stop. This combine with joplin terminal note
Plug 'iamcco/markdown-preview.nvim', { 'branch': 'master'  }

Plug 'voldikss/vim-floaterm'
" nvim v0.5.0
Plug 'kdheepak/lazygit.nvim'

Plug 'iberianpig/tig-explorer.vim', {'branch': 'master'}
Plug 'dyng/ctrlsf.vim'
Plug 'tomasiser/vim-code-dark'
" We recommend updateting the persers on update 
" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'pechorin/any-jump.vim'

call plug#end()


" LSP SERVER REGISER
    " pip install python-language-server
" END LSP

  
" turn on airline powerline symbol by downloand install fonts https://github.com/powerline/fonts via ./install.sh in folder fonts-master https://www.youtube.com/watch?v=-r6Sj70Ziws&ab_channel=TheFrugalComputerGuy
" let g:airline_powerline_fonts = 1
" let g:airline_theme='codedark'
" let g:codedark_conservative = 1


set backspace=2                         " Backspace deletes like most programs in insert mode
set tabstop=2
set shiftwidth=2
set hidden
" set laststatus=2
set pumheight=10                        " Makes popup menu smaller
" set ruler              			            " Show the cursor position all the time
set cmdheight=1                         " More space for displaying messages can be 2
" set wrap                                " Display long lines as just one
" set textwidth=80
set linebreak                            " wrap long lines at a character in 'breakat' rather
" set breakat=" "
" set smarttab                            " Makes tabbing smarter will realize you have 2 vs 4
set expandtab                           " Converts tabs to spaces
set smartindent                         " Makes indenting smart
" set autoindent                          " Good auto indent
" set autoread
set noshowmode                          " We don't need to see things like -- INSERT -- anymore
set nobackup                            " This is recommended by coc
set nowritebackup                       " This is recommended by coc
set updatetime=300                      " Faster completion default 500ms
set timeoutlen=30000                      " By default timeoutlen is 1000 ms, popup poppup
" set formatoptions-=cro                  " Stop newline continution of comments
" set 1000
set clipboard=unnamedplus               " Copy paste between vim and everything else
set splitbelow                          " Horizontal splits will automatically be below
set splitright                          " Vertical splits will automatically be to the right
set t_Co=256                            " Support 256 colors
set conceallevel=0                      " So that I can see `` in markdown files
set lazyredraw				                  " Avoids updating the screen before commands are completed
set cursorline                          " Enable highlighting of the current line
set showtabline=2                       " Always show tabs
" set backspace=indent,eol,start          " Fix backspace indent
set mouse=a  				                    " Enable your mouse
set mousemodel=popup_setpos
" Use modeline overrides
" set modeline
" set modelines=10

set noerrorbells
set noswapfile
set colorcolumn=120 
hi ColorColumn ctermbg=0 guibg=#333333

highlight clear SignColumn
hi Pmenu guibg=#3d3d3d gui=NONE
hi PmenuSel guibg=#232323 gui=NONE
hi PmenuSbar guibg=#bcbcbc
hi PmenuThumb guibg=#585858

" Encoding
set encoding=utf-8
set fileencoding=utf-8                  " The encoding written to file
set fileencodings=utf-8
set fileformats=unix

" Searching
set ignorecase                            " ignore Upper or Lowercase
set smartcase                             " depend of pattern lower or Upper
set number relativenumber
" set hlsearch                              " hightlight search \
" set incsearch                             " set increment next search result

"Floaterm is the termimal popup while using vim, we can use to check git... config
let g:floaterm_keymap_toggle = '<leader>t'
"let g:floaterm_keymap_toggle = '<F1>'
"let g:floaterm_keymap_next   = '<F2>'
"let g:floaterm_keymap_prev   = '<F3>'
"let g:floaterm_keymap_new    = '<F4>'
let g:floaterm_gitcommit='floaterm'
let g:floaterm_autoinsert=1
let g:floaterm_width=0.8
let g:floaterm_height=0.8
let g:floaterm_wintitle=0
let g:floaterm_autoclose=1
" /Floaterm

" BASIC
let mapleader=" "
" nnoremap U <C-R>


" LSC
let g:lsc_enable_autocomplete = v:false
let g:lsc_server_commands = {'dart': 'dart_language_server'}
let g:lsc_reference_highlights = v:false
let g:lsc_trace_level          = 'off'

" GOLANG
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_def_mode = "godef"
if !exists("autocommands_loaded")
  let autocommands_loaded = 1
  autocmd BufWritePost *.go :echo 'saved'
endif
au BufRead,BufNewFile *.go set filetype=go
au InsertLeave * :echo "Auto haha"
" Golang syntax setting 

let g:go_highlight_structs = 1
let g:go_highlight_methods = 1
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" 
let g:go_highlight_function_calls = 1
let g:go_highlight_fields = 1
let g:go_highlight_variable_declarations = 0
let g:go_highlight_variable_assignments = 1
let g:go_highlight_types = 1

syntax on


" gitgutter
let g:gitgutter_preview_win_floating = 1
" un map all keys bindings of gitgutter then will map it again
let g:gitgutter_map_keys = 0
nmap ght <Plug>(GitGutterToggle) 
nmap ghp <Plug>(GitGutterPreviewHunk) 
nmap ghu <Plug>(GitGutterUndoHunk)   
nmap ]c <Plug>(GitGutterNextHunk)
nmap [c <Plug>(GitGutterPrevHunk)
nmap <leader>e :q!<CR>
vmap <leader>e :q!<CR>
" map % to jum faster better open and close of {, [, (
nnoremap <silent><leader>j %
vnoremap <silent><leader>j %

" remap j and k to move down each line of wrapping section (code,text)  
nnoremap j gj
nnoremap k gk

"*****************************************************************************
"" Autocmd Rules
"*****************************************************************************

" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
augroup vimrc-sync-fromstart
autocmd!
autocmd BufEnter * :syntax sync maxlines=200
augroup END

" Remember cursor position
augroup vimrc-remember-cursor-position
autocmd!
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Working with NERDTree
" press `m` to call menu @ cursor position to (add,delete file)
nnoremap <silent><F2> :NERDTreeFind<CR>
nnoremap <silent><F3> :NERDTreeToggle<CR>

" Open list of Files History
nnoremap <silent><leader>i :History<CR>
" Open list of Commands History
nnoremap <silent><leader>y :History:<CR>

" split current window vertical on the right 'set splitright'  
nnoremap <silent><leader>w :vsplit<CR>
" split current window horizontal on bottom 'set splitbelow'
nnoremap <silent><leader>W :split<CR>
" quick jump to first non-blank of row
nnoremap <silent><leader>h ^
" quick jump to last non-blank of row
nnoremap <silent><leader>l $

" FZF
let g:fzf_layout = { 'down': '100%'}

" COMMAND
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--smart-case --color-path="0;33"', {'options': '--delimiter : --nth 4..'}, <bang>0)
autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')

" MAP
nnoremap <silent><leader>g :Rg<CR>
" Open files in current folder
nnoremap <silent><leader>o :Files<CR>
" Fast save
nnoremap <silent><C-s> :w!<CR>
" ngoln 
nnoremap <silent><leader>b :Buffers<CR>

nmap <C-n> :NERDTreeToggle<CR>
nmap <C-p> :FZF!<CR>
"nmap <Space> <kDividf>
" Better window navigation ctrl+h,j,k,l instead of ctrl+w+h,j,k,l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" bind `tab` for autocompletion https://stackoverflow.com/questions/67370086/how-to-remap-coc-nvim-autocomplete-key
inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<TAB>"
inoremap <silent><expr> <cr> "\<c-g>u\<CR>"

nmap <leader>w <C-w>w
nmap <leader>t gt
nmap <leader>t :vs<CR><C-w>w:terminal<CR>i
nmap <silent> <leader>m :History<CR>
nmap <leader>f :Ag<CR>
"nmap <silent> <Space><Space> :noh<CR>
nmap <leader>d :LSClientEnable<CR>:lopen<CR>
" nmap <leader>dd :LSClientDisable<CR>:lclose<CR>

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

tnoremap <leader>q <C-\><C-n>:q!<CR>

" MAP COC
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Normal mode: Jump to definition under cursor

let g:gruvbox_contrast_dark = 'soft'
syntax on 
" color gruvbox
" colorscheme gruvbox
"
colorscheme monokai 
" colorscheme codedark

set background=dark
set termguicolors
