" PLUGIN
call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

Plug 'scrooloose/nerdTree'
Plug 'sainnhe/gruvbox-material'
Plug 'arcticicestudio/nord-vim'
Plug 'gruvbox-community/gruvbox'
Plug 'dart-lang/dart-vim-plugin'

Plug 'natebosch/vim-lsc', {'tag': 'v0.4.0'}
Plug 'natebosch/vim-lsc-dart'

Plug 'neoclide/coc.nvim', {'branch': 'release'}                                                                                                                                                                  
Plug 'josa42/coc-go', {'branch': 'master'} 

Plug 'tveskag/nvim-blame-line'
Plug 'airblade/vim-gitgutter', {'branch': 'master'}
Plug 'tpope/vim-fugitive', {'branch': 'master'}

Plug 'crusoexia/vim-monokai'

Plug 'tveskag/nvim-blame-line'
Plug 'iberianpig/tig-explorer.vim', {'branch': 'master'}
call plug#end()


" BASIC
let mapleader=" "
set completeopt-=preview
set autowrite
"set ignorecase
"set smartcase
set updatetime=300
set timeoutlen=3000
set mmp=5000
set number relativenumber

" gitgutter                                                                                                                                                                                                          
let g:gitgutter_preview_win_floating = 1                                                                                                                                                                             
" un map all keys bindings of gitgutter then will map it again                                                                                                                                                       
let g:gitgutter_map_keys = 0
" gitgutter                                                                                                                                                                                                      
let g:gitgutter_preview_win_floating = 1
nmap ght <Plug>(GitGutterToggle)                                                                                                                                                                                 
nmap ghp <Plug>(GitGutterPreviewHunk)                                                                                                                                                                            
nmap ghu <Plug>(GitGutterUndoHunk)                                                                                                                                                                               
nmap ]c <Plug>(GitGutterNextHunk)                                                                                                                                                                                
nmap [c <Plug>(GitGutterPrevHunk)

" LSC
let g:lsc_enable_autocomplete = v:true
let g:lsc_server_commands = {'dart': 'dart_language_server'}
let g:lsc_reference_highlights = v:false
let g:lsc_trace_level          = 'on'


let g:go_highlight_structs = 1
let g:go_highlight_methods = 1
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" 
let g:go_highlight_function_calls = 1
let g:go_highlight_fields = 1
let g:go_highlight_variable_declarations = 0
let g:go_highlight_variable_assignments = 1
let g:go_highlight_types = 1


" GOLANG
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_def_mode = "godef"
if !exists("autocommands_loaded")
  let autocommands_loaded = 1
  echo "writtern file"
  autocmd BufWritePost *.go :GoBuild
endif


" Remember cursor position                                                                                                                                                                                           
augroup vimrc-remember-cursor-position                                                                                                                                                                               
autocmd!                                                                                                                                                                                                             
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif                                                                                                                    
augroup END  

    
" DART
let g:dart_format_on_save = 1
let g:dart_style_guide = 0

" FLUTTER
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)


" FZF
let g:fzf_layout = { 'down': '100%'}

" COMMAND
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--smart-case --color-path="0;33"', {'options': '--delimiter : --nth 4..'}, <bang>0)

inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<TAB>"

" MAP
nmap <C-n> :NERDTreeToggle<CR>
nmap <C-p> :FZF!<CR>
nmap <Space> <kDivide>
nmap <leader>w <C-w>w
nmap <leader>t gt
nmap <leader>t :vs<CR><C-w>w:terminal<CR>i
nmap <silent> <leader>m :History<CR>
nmap <leader>f :Ag<CR>
nmap <silent> <Space><Space> :noh<CR>
nmap <leader>d :LSClientEnable<CR>:lopen<CR>
nmap <leader>dd :LSClientDisable<CR>:lclose<CR>
nmap <silent><C-s> :w!<CR>
nmap <leader>e :q!<CR>

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

inoremap <leader>q <C-\><C-n>:q!<CR>

nmap <silent><leader>tg :TigBlame<CR>
" MAP COC
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

let g:gruvbox_contrast_dark = 'soft'
color gruvbox
" color monokai
set background=dark
set termguicolors
